// Problem2.java --- 
// Filename: Problem2.java
// Description: 
// Author: amritendu
// Email:  amritoit@gmail.com
// Organization:  IIT Madras
// Created: Sat Feb 27 14:51:21 2016 (+0530)
// Last-Updated: Sat Feb 27 22:02:05 2016 (+0530)
//           By: amritendu
//     Update #: 45
// 
/*
  Problem: Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
           By starting with 1 and 2, the first 10 terms will be:

           1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

           By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
           find the sum of the even-valued terms.

  Online link: 
           https://projecteuler.net/problem=2
           https://www.hackerrank.com/contests/projecteuler/challenges/euler002
*/


public class Problem2{

    public static void main(String[] args){
        
        if(args[0]==null)System.out.println("Please pass the number to me: java <className> <number> ");
        long n=Long.parseLong(args[0]);
        System.out.println(calEvenNumSumFromFibonacciSeries(n));
    }


    /*
      
      Trick1: Every third fibonacci number is even. Because 2F(n+1) = F(n+3) - F(n)
              Or you can proof like odd+odd=even, odd+even=even,even+odd=even,even+even=even
              Hence, the series starts from 1,1 , so thiird will be odd(1)+odd(1)=2(even), see carefully, 
              The series is bound to generate two odd next, followed by one even. Hence there is a pattern.
      
      Trick2: Next trick is F(N)=4*F(n-3)+F(n-6), as we only need to collect the even numbers fibonacci,
              hence we can skip the rest odd numbers, and it is possible if we can represent the next 
              even fibonacci in term of last two even fibonacci. 

              Proof: 

              F(n) = F(n-1) + F(n-2) = F(n-2) + F(n-3) + F(n-2)
                   = 2F(n-2) + F(n-3)
                   = 2[F(n-3) + F(n-4)] + F(n-3)
                   = 3F(n-3) + 2F(n-4)
                   = 3F(n-3) + 2F(n-5) + 2F(n-6)

              And we know that
                   F(n-3) = 2F(n-5) + F(n-6)
                   2F(n-5) = F(n-3) - F(n-6)

              Hence 
              
              F(n) = 3F(n-3) + [F(n-3) - F(n-6)] + 2F(n-6)
                   = 4F(n-3) + F(n-6)

     */
    private static long calEvenNumSumFromFibonacciSeries(long MaxNo){
        
        int l2=2,l1=8;
        long sum=10;
        int temp;
        
        if(MaxNo<=8)return 3;
        
        for(;;){

            temp=l1;
            l1=4*l1+l2;
            l2=temp;
            if(l1>=MaxNo)break;
            sum+=l1;
        }

        return sum;
    }

}
